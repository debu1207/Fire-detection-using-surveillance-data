# -*- coding: utf-8 -*-
"""Fire Detection using survilence data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B6qcv60Mxw07irgVsID-Ir-CESuM3kIN

**Fire detection Project**
"""

# Importing all required libraries
import keras
import tensorflow as tf

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns
 
#configure
# sets matplotlib to inline and displays graphs below the corressponding cell.
# %matplotlib inline  
style.use('fivethirtyeight')
sns.set(style='whitegrid',color_codes=True)

# importing libraries for splitting data and labeling of data
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

#preprocess.
from keras.preprocessing.image import ImageDataGenerator

# libraries for the model
from keras.models import Sequential
from keras.models import Model
from keras.layers import Dense
from keras.optimizers import Adam,SGD
from keras.utils import to_categorical
from keras.callbacks import ReduceLROnPlateau

# libraries required for cnn
from keras.layers import Dropout, Flatten,Activation
from keras.layers import Conv2D, MaxPooling2D, BatchNormalization
from keras.layers import InputLayer
 
import tensorflow as tf
import random as rn

# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.
import cv2                  
import numpy as np  
from tqdm import tqdm
import os                   
from random import shuffle  
from zipfile import ZipFile
from PIL import Image
#pre-trained model
from keras.applications.resnet50 import ResNet50

os.listdir('/content/drive/My Drive/Fire-Detection')

def assign_label(img,label):
    return label
def make_train_data(label,DIR):
    for img in tqdm(os.listdir(DIR)):
        path = os.path.join(DIR,img)
        img = cv2.imread(path,cv2.IMREAD_COLOR)
        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))
        
        X.append(np.array(img))
        Z.append(str(label))

X=[]
Z=[]
IMG_SIZE=150
NOTFIRE='/content/drive/My Drive/Fire-Detection/0'
FIRE='/content/drive/My Drive/Fire-Detection/1'

make_train_data('NOTFIRE',NOTFIRE)
make_train_data('FIRE',FIRE)

fig,ax=plt.subplots(2,5)
plt.subplots_adjust(bottom=0.3, top=0.7, hspace=0)
fig.set_size_inches(10,10)

for i in range(2):
    for j in range (5):
        l=rn.randint(0,len(Z))
        ax[i,j].imshow(X[l][:,:,::-1])
        ax[i,j].set_title(Z[l])
        ax[i,j].set_aspect('equal')

# labeling the data
le=LabelEncoder()
Y=le.fit_transform(Z)
Y=to_categorical(Y,2)
print(Y)
X=np.array(X)
X=X/255

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=1337)

np.random.seed(42)
rn.seed(42)
#tf.set_random_seed(42)

base_model=ResNet50(include_top=False, weights='imagenet',input_shape=(150,150,3), pooling='max')
base_model.summary()

model=Sequential()
model.add(base_model)
model.add(Dropout(0.20))
model.add(Dense(2048,activation='relu'))
model.add(Dense(1024,activation='relu'))
model.add(Dense(512,activation='relu'))
model.add(Dense(2,activation='softmax'))

epochs=50
batch_size=128
red_lr=ReduceLROnPlateau(monitor='val_acc', factor=0.1, min_delta=0.0001, patience=2, verbose=1)
base_model.trainable=True # setting the VGG model to be trainable.
model.compile(optimizer=Adam(lr=1e-5),loss='categorical_crossentropy',metrics=['accuracy'])
model.summary()

History = model.fit(x_train, y_train, epochs=epochs, validation_data=(x_test,y_test))

plt.plot(History.history['accuracy'])
plt.plot(History.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train', 'test'])
plt.show()

plt.plot(History.history['loss'])
plt.plot(History.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epochs')
plt.legend(['train', 'test'])
plt.show()

DIR="/content/drive/My Drive/Fire-Detection/1"
files=os.listdir(path)
for i in files:
  newpath = os.path.join(DIR,i)
  X=cv2.imread(newpath,cv2.IMREAD_COLOR)
  X=cv2.resize(X,(150,150))
  X = np.array(X)
  X = np.expand_dims(X, axis=0)

  print(np.round(model.predict(X)))

DIR="/content/drive/My Drive/Fire-Detection/0"
files=os.listdir(path)
for i in files:
  newpath1 = os.path.join(DIR,i)
  X=cv2.imread(newpath1,cv2.IMREAD_COLOR)
  X=cv2.resize(X,(150,150))
  X = np.array(X)
  X = np.expand_dims(X, axis=0)

  print(np.round(model.predict(X)))